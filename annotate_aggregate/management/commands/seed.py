import random
from django.utils import timezone
from annotate_aggregate.models import Author, Book, Store, Publisher
from django.core.management.base import BaseCommand
from faker import Faker

fake = Faker()


class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument('arg', type=int)

    def handle(self, *args, **options):
        num = options['arg']

        for _ in range(int(num)):
            Author.objects.create(name=fake.name(), age=random.randint(20, 70))

        for _ in range(int(num)):
            Publisher.objects.create(name=fake.company())

            for publisher in Publisher.objects.all():
                for _ in range(int(num)):
                    Book.objects.bulk_create([Book(
                        name=fake.sentence(),
                        price=random.uniform(29.99, 225.9),
                        pages=random.randint(50, 300),
                        rating=round(random.uniform(1, 5), 2),
                        pubdate=timezone.now(),
                        publisher=publisher)])

        books = Book.objects.all()
        for _ in range(int(num)):
            store = Store.objects.create(name=fake.company())
            store.books.set(books)
            store.save()

        books_id = list(Book.objects.values_list('id', flat=True))
        photo_ids = Author.objects.values_list('id', flat=True)
        tag_count = len(books_id)

        for author_id in photo_ids:
            books = []
            random.shuffle(books)

            rand_num_tags = random.randint(0, tag_count)
            photo_tags = books_id[:rand_num_tags]

            for book_id in photo_tags:
                # through is the table generated by django to link m2m between tag and photo
                book = Book.authors.through(book_id=book_id, author_id=author_id)
                books.append(book)

        Book.authors.through.objects.bulk_create(books, batch_size=7000)
